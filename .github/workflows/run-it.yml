name: Run Integration Tests
concurrency:
  group: Run-Integration-Tests-${{ github.head_ref }}
  cancel-in-progress: true

on:
  pull_request: null

env:
  OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}

jobs:
  integration-tests:
    runs-on: 
      group: 'arm64-image-builders'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_TOKEN }}

      - name: Pull Web Docker image
        run: docker pull danswer/danswer-web-server:latest || true

      - name: Build Web Docker image
        uses: docker/build-push-action@v5
        with:
          context: ./web
          file: ./web/Dockerfile
          platforms: linux/arm64
          pull: false
          push: false
          load: true
          tags: danswer/danswer-web-server:latest
          cache-from: |
            type=local,src=/var/lib/docker
            danswer/danswer-web-server:latest
          cache-to: type=inline

      - name: Build Backend Docker image
        uses: docker/build-push-action@v5
        with:
          context: ./backend
          file: ./backend/Dockerfile
          platforms: linux/arm64
          pull: true
          push: false
          load: true
          tags: danswer/danswer-backend:latest
          cache-from: type=registry,ref=danswer/danswer-backend:latest
          cache-to: type=inline

      - name: Build Model Server Docker image
        uses: docker/build-push-action@v5
        with:
          context: ./backend
          file: ./backend/Dockerfile.model_server
          platforms: linux/arm64
          pull: true
          push: false
          load: true
          tags: danswer/danswer-model-server:latest
          cache-from: type=registry,ref=danswer/danswer-model-server:latest
          cache-to: type=inline

      - name: Build integration test Docker image
        uses: docker/build-push-action@v5
        with:
          context: ./backend
          file: ./backend/tests/integration/Dockerfile
          platforms: linux/arm64
          pull: true
          push: true
          tags: danswer/integration-test-runner:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Create Docker network
        run: docker network create danswer-network

      - name: Start Docker containers
        run: |
          cd deployment/docker_compose
          docker compose -f docker-compose.dev.yml -p danswer-stack up -d --build
        # docker ps -q --filter name=danswer-stack | xargs -I {} docker network connect danswer-network {}
        id: start_docker

      - name: Wait for service to be ready
        run: |
          echo "Starting wait-for-service script..."
          
          start_time=$(date +%s)
          timeout=300  # 5 minutes in seconds
          
          while true; do
            current_time=$(date +%s)
            elapsed_time=$((current_time - start_time))
            
            if [ $elapsed_time -ge $timeout ]; then
              echo "Timeout reached. Service did not become ready in 5 minutes."
              exit 1
            fi
            
            # Use curl with error handling to ignore specific exit code 56
            response=$(curl -s -o /dev/null -w "%{http_code}" http://localhost:8080/health || echo "curl_error")
            
            if [ "$response" = "200" ]; then
              echo "Service is ready!"
              break
            elif [ "$response" = "curl_error" ]; then
              echo "Curl encountered an error, possibly exit code 56. Continuing to retry..."
            else
              echo "Service not ready yet (HTTP status $response). Retrying in 5 seconds..."
            fi
            
            sleep 5
          done
          echo "Finished waiting for service."

      - name: Run integration tests
        run: |
          echo "Running integration tests..."
          docker run --rm --network danswer-stack_default \
            -e POSTGRES_HOST=relational_db \
            -e POSTGRES_USER=postgres \
            -e POSTGRES_PASSWORD=password \
            -e POSTGRES_DB=postgres \
            -e VESPA_HOST=index
            -e API_SERVER_HOST=api_server
            -e OPENAI_API_KEY=${OPENAI_API_KEY} \
            danswer/integration-test-runner:latest
        continue-on-error: true
        id: run_tests

      - name: Check test results
        run: |
          if [ ${{ steps.run_tests.outcome }} == 'failure' ]; then
            echo "Integration tests failed. Exiting with error."
            exit 1
          else
            echo "All integration tests passed successfully."
          fi

      - name: Save Docker logs
        if: success() || failure()
        run: |
          cd deployment/docker_compose
          docker compose -f docker-compose.dev.yml -p danswer-stack logs > docker-compose.log
          mv docker-compose.log ${{ github.workspace }}/docker-compose.log
      
      - name: Upload logs
        if: success() || failure()
        uses: actions/upload-artifact@v3
        with:
          name: docker-logs
          path: ${{ github.workspace }}/docker-compose.log

      - name: Stop Docker containers
        run: docker compose down
