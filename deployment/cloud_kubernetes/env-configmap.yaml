apiVersion: v1
kind: ConfigMap
metadata:
  name: env-configmap
data:
  # Auth Setting, also check the secrets file
  AUTH_TYPE: "disabled"  # Change this for production uses unless Danswer is only accessible behind VPN
  ENCRYPTION_KEY_SECRET: ""  # This should not be specified directly in the yaml, this is just for reference
  SESSION_EXPIRE_TIME_SECONDS: "86400"  # 1 Day Default
  VALID_EMAIL_DOMAINS: ""  # Can be something like danswer.ai, as an extra double-check
  # SMTP_SERVER: "" # For sending verification emails, if unspecified then defaults to 'smtp.gmail.com'
  # SMTP_PORT: "" # For sending verification emails, if unspecified then defaults to '587'
  # SMTP_USER: ""  # 'your-email@company.com'
  # SMTP_PASS: ""  # 'your-gmail-password'
  EMAIL_FROM: ""  # 'your-email@company.com' SMTP_USER missing used instead
  CORS_ALLOWED_ORIGIN: ""
  # Gen AI Settings
  GEN_AI_MAX_TOKENS: ""
  QA_TIMEOUT: "60"
  MAX_CHUNKS_FED_TO_CHAT: ""
  DISABLE_LLM_DOC_RELEVANCE: ""
  DISABLE_LLM_CHOOSE_SEARCH: ""
  DISABLE_LLM_QUERY_REPHRASE: ""
  # Query Options
  DOC_TIME_DECAY: ""
  HYBRID_ALPHA: ""
  EDIT_KEYWORD_QUERY: ""
  MULTILINGUAL_QUERY_EXPANSION: ""
  LANGUAGE_HINT: ""
  LANGUAGE_CHAT_NAMING_HINT: ""
  QA_PROMPT_OVERRIDE: ""
  # Other Servicesg
  POSTGRES_HOST: "database-1.cluster-c4vuxevtpnhl.us-east-2.rds.amazonaws.com"           # e.g., danswer-postgres.cluster-abc123xyz.us-east-1.rds.amazonaws.com
  POSTGRES_PORT: "5432"
  POSTGRES_DB: "danswer"            # e.g., danswerdb
  POSTGRES_USER: "postgres"        # e.g., danswer_admin
  POSTGRES_PASSWORD: "kBdZ21rJ8ntLGxrXBaBV"
  # Authentication and Authorization
  OAUTH_CLIENT_ID: "80118066002-2gcdbm15v44kdo79vlus4jighg04k61b.apps.googleusercontent.com"
  OAUTH_CLIENT_SECRET: "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"

  # Enterprise Features
  ENABLE_PAID_ENTERPRISE_EDITION_FEATURES: "true"
  MULTI_TENANT: "true"
  STRIPE_PRICE: "price_1Q6IEvHlhTYqRZibpsT2GKYW"

  # SMTP Configuration
  SMTP_USER: "pablosfsanchez@gmail.com"
  SMTP_PASS: "pktj bpun gndl coqp"
  SMTP_SERVER: "smtp.gmail.com"
  SMTP_PORT: "587"



  REDIS_SSL: "true"
  # redis_host = "master.redisencrypted.4h4xor.use2.cache.amazonaws.com"
# redis_port = 6379

# # Create a Redis client
# redis_client = redis.Redis(
#     host=redis_host,
#     port=redis_port,
#     password="50lbsAuthTokenDanswer",
#     ssl=True,
#     ssl_cert_reqs="required",
#     socket_timeout=10,
#     socket_connect_timeout=10,
#     retry_on_timeout=True,
#     socket_keepalive=True
# )

# # Test the connection
# try:
#     # Attempt to ping the Redis server
#     response = redis_client.ping()
#     print(f"Successfully connected to Redis at {redis_host}:{redis_port}")
#     print(f"Ping response: {response}")







  # Redis Configuration
  REDIS_HOST: "master.redisencrypted.4h4xor.use2.cache.amazonaws.com"      # e.g., danswer-redis.abc123.xyz.use1.cache.amazonaws.com
  REDIS_PORT: "6379"

  # POSTGRES_HOST: "relational-db-service"
  VESPA_HOST: "document-index-service"
  # REDIS_HOST: "redis-service"
  # Internet Search Tool
  BING_API_KEY: ""
  # Don't change the NLP models unless you know what you're doing
  EMBEDDING_BATCH_SIZE: ""
  DOCUMENT_ENCODER_MODEL: ""
  NORMALIZE_EMBEDDINGS: ""
  ASYM_QUERY_PREFIX: ""
  ASYM_PASSAGE_PREFIX: ""
  DISABLE_RERANK_FOR_STREAMING: ""
  MODEL_SERVER_HOST: "inference-model-server-service"
  MODEL_SERVER_PORT: ""
  INDEXING_MODEL_SERVER_HOST: "indexing-model-server-service"
  MIN_THREADS_ML_MODELS: ""
  # Indexing Configs
  VESPA_SEARCHER_THREADS: ""
  NUM_INDEXING_WORKERS: ""
  ENABLED_CONNECTOR_TYPES: ""
  DISABLE_INDEX_UPDATE_ON_SWAP: ""
  DASK_JOB_CLIENT_ENABLED: ""
  CONTINUE_ON_CONNECTOR_FAILURE: ""
  EXPERIMENTAL_CHECKPOINTING_ENABLED: ""
  CONFLUENCE_CONNECTOR_LABELS_TO_SKIP: ""
  JIRA_API_VERSION: ""
  WEB_CONNECTOR_VALIDATE_URLS: ""
  GONG_CONNECTOR_START_TIME: ""
  NOTION_CONNECTOR_ENABLE_RECURSIVE_PAGE_LOOKUP: ""
  # DanswerBot SlackBot Configs
  DANSWER_BOT_SLACK_APP_TOKEN: ""
  DANSWER_BOT_SLACK_BOT_TOKEN: ""
  DANSWER_BOT_DISABLE_DOCS_ONLY_ANSWER: ""
  DANSWER_BOT_DISPLAY_ERROR_MSGS: ""
  DANSWER_BOT_RESPOND_EVERY_CHANNEL: ""
  DANSWER_BOT_DISABLE_COT: ""  # Currently unused
  NOTIFY_SLACKBOT_NO_ANSWER: ""
  # Logging
  # Optional Telemetry, please keep it on (nothing sensitive is collected)? <3
  # https://docs.danswer.dev/more/telemetry
  DISABLE_TELEMETRY: ""
  LOG_LEVEL: ""
  LOG_ALL_MODEL_INTERACTIONS: ""
  LOG_DANSWER_MODEL_INTERACTIONS: ""
  LOG_VESPA_TIMING_INFORMATION: ""
  # Shared or Non-backend Related
  INTERNAL_URL: "http://api-server-service:80"  # for web server
  WEB_DOMAIN: "http://a3a67c3eff4044a7cbd1e62b1ebdfff2-1543735950.us-east-2.elb.amazonaws.com"  # for web server and api server
  DOMAIN: "localhost"  # for nginx
  # Chat Configs
  HARD_DELETE_CHATS: ""



  NEXT_PUBLIC_APP_URL: "http://a3a67c3eff4044a7cbd1e62b1ebdfff2-1543735950.us-east-2.elb.amazonaws.com"

# # Multi-tenancy configuration
# MULTI_TENANT = os.environ.get("MULTI_TENANT", "").lower() == "true"
# ENABLE_EMAIL_INVITES = os.environ.get("ENABLE_EMAIL_INVITES", "").lower() == "true"

  # Security and authentication
  # SECRET_JWT_KEY: ""  # Used for encryption of the JWT token for user's tenant context
  # DATA_PLANE_SECRET: ""  # Used for secure communication between the control and data plane
  # EXPECTED_API_KEY: ""  # Additional security check for the control plane API

  # # API configuration
  # CONTROL_PLANE_API_BASE_URL: "http://localhost:8082"

  # # JWT configuration
  # JWT_ALGORITHM: "HS256"



  SECRET_JWT_KEY: ""  # Used for encryption of the JWT token for user's tenant context
  DATA_PLANE_SECRET: "secret"  # Used for secure communication between the control and data plane
  EXPECTED_API_KEY: "api_key"  # Additional security check for the control plane API

  # API configuration
  CONTROL_PLANE_API_BASE_URL: "http://aa47f1cfc4f59482495158f1bd263d80-1316499545.us-east-2.elb.amazonaws.com:80/api"


  # JWT configuration
  JWT_ALGORITHM: "HS256"